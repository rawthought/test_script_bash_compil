#!/bin/bash
# init
#export LANG=fr_FR.UTF-8
#export LANG=en_GB.UTF-8
export LANG=en_US.UTF-8
#source fonction
#source local
# Fonction  interactiv pause
function pause(){
   read -p "$*"
}

function ErrorTest() {
    if [ "$1" != "0" ]; then
        echo "Erreur $2"
#        exit 1
    fi
}

#color var init
#black='\e[0;30m'
#grey='\e[1;30m'
red='\e[0;31m'
#pink='\e[1;31m'
#darkgreen='\e[0;32m'
#green='\e[1;32m'
#orange='\e[0;33m'
yellow='\e[1;33m'
#deepblue='\e[0;34m'
#blue='\e[1;34m'
#darkpurple='\e[0;35m'
#purple='\e[1;35m'
darkcyan='\e[0;36m'
cyan='\e[1;36m'
lightgrey='\e[0;37m'
white='\e[1;37m'

neutral='\e[0;m'

user=$USER
username=$USERNAME
homedir="/home/$user"
gitdir="$homedir/git"
userhit="Press [Enter] key to continue..."

# -p show the prompt
# -n1 allow only one char to be entered
# -e allow color and line jump

echo -e "<<<---   ${yellow}HELLO ${red}$username${neutral}  --->>>
${yellow}Compilation and update Script for GIT programs
Choose your software :${neutral}
1.lmms
2.darktable
3.quit
"
read -e -p '' -n1 nprog 
clear
if [ $nprog == "1" ]; then
	program="lmms"
	gitcloneurl="https://github.com/LMMS/lmms.git"
	echo -e "${red}$program ${yellow}compilation${neutral}"
	echo -e "${yellow}Please choose your branch :${neutral}
1.master (daily build)
2.stable-1.0
3.stable-1.1
4.quit
"
read -e -p '' -n1 nbranche
	if [ $nbranche == "1" ]; then
		branche="master"
		message="- ${red}$program $branche${yellow} Installation${neutral}"
	elif [ $nbranche == "2" ]; then
		branche="stable-1.0"
		message="- ${red}$program $branche${yellow} Installation${neutral}"
	elif [ $nbranche == "3" ]; then
		branche="stable-1.1"
		message="- ${red}$program $branche${yellow} Installation${neutral}"
	else 
		message="${yellow}quit the compilation${neutral}"
		exit 0
	fi

elif [ $nprog == "2" ]; then
	program="darktable"
	gksu apt-get install intltool xsltproc libsaxonb-java libgphoto2-2-dev webp libwebp-dev libsdl-image1.2-dev liblensfun-dev ruby-rsvg2 librsvg2-ruby librsvg2-ruby1.8
	
#	gksu apt-get build-dep darktable

	gitcloneurl="https://github.com/darktable-org/darktable.git"
	echo -e "${red}$program${yellow}compilation${neutral}"
	echo -e "${yellow}Please choose your branch :${neutral}
1.master (daily build)
2.stable-1.4.x
3.quitter
" 
read -e -p '' -n1 nbranche
	if [ $nbranche == "1" ]; then
		branche="master"
		message="- ${red}$program $branche${yellow} Installation${neutral}"
	elif [ $nbranche == "2" ]; then
		branche="darktable-1.4.x"
		message="- ${red}$program $branche${yellow} Installation${neutral}"
	else 
		message="${yellow}quit the compilation${neutral}"
		exit 0
	fi
else 
	echo -e "${yellow}quit the compilation${neutral}"
	pause "
	$userhit"
	exit 0
fi

clear
echo -e "$message"
pause "$userhit"


#if [ -d "$gitdir" ]; then
#	cd $gitdir
#	git init
#else
#	mkdir $gitdir
#	cd $gitdir
#	git init
#fi

#git branch --list							#ask for the branch list and mark the active branch with a star.


#var init

cible="/opt/$program-$branche"
#test1= test -d $gitdir
#echo "$test1"
#pause "$cible"

stage1="stage 1: 
syncing $program $branche with github"
stage2="stage 2: 
cleaning of a possible pre-compilation of $program $branche"
stage3="stage 3: 
prepare install of $program $branche to $cible"
stage4="stage 4: 
compilation of $program $branche"
stage5="stage 5: 
Install $program $branche in $cible"




echo -e "
	${yellow}<<<- cloning and compilation script for ${red}$program $branche${yellow} ->>>${neutral}

. $stage1
. $stage2
. $stage3
. $stage4
. $stage5
"



#pause "
#${yellow}$stage1${neutral}
#$userhit"
pause "
$stage1
$userhit"

#cd $gitdir
#rm -r -f $gitdir
#git clone https://github.com/LMMS/lmms.git

#if [ -d "$gitdir" ]; then
#	cd $gitdir
#	git init
#else
#	mkdir $gitdir
#	cd $gitdir
#	git init
#fi

if [ -d "$gitdir/$program" ]; then
	cd $gitdir/$program
else
	if [ -d "$gitdir" ]; then
		cd $gitdir
	else
		mkdir $gitdir
		cd $gitdir
	fi
		git clone $gitcloneurl
		cd $gitdir/$program
		git init
fi

ErrorTest $? "cd $gitdir"
git checkout $branche
ErrorTest $? "git checkout $branche"
git commit -a
git pull $gitcloneurl

#git submodule init
#git submodule update

# if ["$?" != "0" ]; then
#  exit 1
#fi

#git submodule update --init --recursive
#ErrorTest $? "git submodule"

#pause "
#${yellow}$stage2${neutral}
#$userhit"
pause "
$stage2
$userhit"
#rm -r $gitdir/build
if [ -d "$gitdir/$program/build" ]; then
	cd $gitdir/$program/build
	make distclean
else
	mkdir -p $gitdir/$program/build
	cd $gitdir/$program/build
	make distclean
fi

#mkdir -p $gitdir/$program/build

#cd $gitdir/$program
#make distclean
#cd $gitdir/$program/build
#rm -r CMakeCache.txt
#cd $gitdir/build
pause "
$stage3
$userhit"

cmake ../ -DCMAKE_INSTALL_PREFIX=$cible
# -CMAKE_BUILD_TYPE=Release 
# -DUSE_WEBP=OFF

pause "
$stage4
$userhit"
make -j2

pause "
$stage5
$userhit"
gksu make install

exit 0
